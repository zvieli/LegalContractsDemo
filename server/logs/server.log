🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
✅ CCIP Arbitration Integration initialized
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically

🔄 Shutting down ArbiTrust V7 Server...
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
✅ CCIP Arbitration Integration initialized
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 CCIP Event Listener started successfully
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
✅ CCIP Arbitration Integration initialized
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 Addresses resolved:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
📋 CCIP Contracts loaded:
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
🏭 Production Mode: ENABLED - Using Helia local node
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
✅ CCIP Arbitration Integration initialized
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
   • Test: POST http://localhost:3001/api/v7/ccip/test
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
🤖 Processing CCIP arbitration for request test-1761064355116...
🟡 [callOllama] Sending prompt to Ollama: EVIDENCE:
CCIP test evidence (ADMIN_BYPASS)
CONTRACT:
CCIP Cross-Chain Arbitration Request
        Dispute Type: integration_test
        Requested Amount: 0.000000000000000288 ETH
        Additional Context: {"test":true}
DISPUTE_ID: unknown

You are an arbitrator. In this dispute, PARTY_A is the client/claimant who initiated the contract, and PARTY_B is the contractor/supplier who was hired to perform the work. Analyze the evidence and contract dispute above. Determine if PARTY_A wins (breach by PARTY_B), PARTY_B wins (breach by PARTY_A), NO_PENALTY (no breach or mutual agreement), or DRAW (insufficient evidence). Key guidelines: - PARTY_A_WINS if PARTY_B breached the contract causing material harm to PARTY_A. - NO_PENALTY if deliverables were accepted and no material financial loss occurred. - PARTY_B_WINS if PARTY_A breached. - DRAW if evidence is insufficient or ambiguous. Provide your decision in EXACTLY this format:

VERDICT: [PARTY_A_WINS or PARTY_B_WINS or NO_PENALTY or DRAW]
RATIONALE: [brief explanation]
CONFIDENCE: [0.0-1.0 or percentage]
REIMBURSEMENT: [amount or NONE]
🤖 Processing CCIP arbitration for request test-1761064395361...
🟡 [callOllama] Sending prompt to Ollama: EVIDENCE:
CCIP test evidence (ADMIN_BYPASS)
CONTRACT:
CCIP Cross-Chain Arbitration Request
        Dispute Type: integration_test
        Requested Amount: 0.000000000000000288 ETH
        Additional Context: {"test":true}
DISPUTE_ID: unknown

You are an arbitrator. In this dispute, PARTY_A is the client/claimant who initiated the contract, and PARTY_B is the contractor/supplier who was hired to perform the work. Analyze the evidence and contract dispute above. Determine if PARTY_A wins (breach by PARTY_B), PARTY_B wins (breach by PARTY_A), NO_PENALTY (no breach or mutual agreement), or DRAW (insufficient evidence). Key guidelines: - PARTY_A_WINS if PARTY_B breached the contract causing material harm to PARTY_A. - NO_PENALTY if deliverables were accepted and no material financial loss occurred. - PARTY_B_WINS if PARTY_A breached. - DRAW if evidence is insufficient or ambiguous. Provide your decision in EXACTLY this format:

VERDICT: [PARTY_A_WINS or PARTY_B_WINS or NO_PENALTY or DRAW]
RATIONALE: [brief explanation]
CONFIDENCE: [0.0-1.0 or percentage]
REIMBURSEMENT: [amount or NONE]
🟢 [callOllama] Ollama response: {"model":"llama3.2:latest","created_at":"2025-10-21T16:33:24.1261112Z","response":"VERDICT: PARTY_A_WINS\nRATIONALE: The contract dispute indicates that PARTY_B failed to deliver the expected functionality, as evidenced by the CCIP test failure (ADMIN_BYPASS). This breach caused material harm to PARTY_A, resulting in a financial loss of 0.000000000000000288 ETH.\nCONFIDENCE: 0.9\nREIMBURSEMENT: 0.000000000000000288 ETH","done":true,"done_reason":"stop","context":[128006,9125,128007,271,38766,1303,33025,2696,25,6790,220,2366,18,271,128009,128006,882,128007,271,36,7635,10360,512,3791,3378,1296,6029,320,35797,1702,10158,5045,340,5910,42205,512,3791,3378,11511,12,19368,59895,2214,6274,198,286,4185,8660,4078,25,18052,4552,198,286,6274,291,26868,25,220,15,13,931,931,931,931,931,15287,38842,198,286,24086,9805,25,5324,1985,794,1904,534,21894,93443,3533,25,9987,271,2675,527,459,59057,859,13,763,420,26086,11,64327,1596,374,279,3016,14,8017,519,889,33230,279,5226,11,323,64327,1702,374,279,31072,2754,72791,889,574,22163,311,2804,279,990,13,38527,3059,279,6029,323,5226,26086,3485,13,31001,422,64327,1596,15160,320,21152,613,555,64327,1702,705,64327,1702,15160,320,21152,613,555,64327,1596,705,5782,1106,965,984,22875,320,2201,31471,477,27848,9306,705,477,72752,320,1354,27781,6029,570,5422,17959,25,482,64327,1596,2832,9751,422,64327,1702,82166,279,5226,14718,3769,11682,311,64327,1596,13,482,5782,1106,965,984,22875,422,6493,4893,1051,11928,323,912,3769,6020,4814,10222,13,482,64327,1702,2832,9751,422,64327,1596,82166,13,482,72752,422,6029,374,39413,477,55861,13,40665,701,5597,304,4154,6966,9109,420,3645,1473,3848,35,15149,25,510,34590,56,1596,2832,9751,477,64327,1702,2832,9751,477,5782,1106,965,984,22875,477,72752,933,55871,25940,25,510,6796,16540,933,39734,926,10360,25,510,15,13,15,12,16,13,15,477,11668,933,793,1829,86194,937,5441,25,510,6173,477,43969,60,128009,128006,78191,128007,271,3848,35,15149,25,64327,1596,2832,9751,198,55871,25940,25,578,5226,26086,15151,430,64327,1702,4745,311,6493,279,3685,15293,11,439,69457,555,279,13844,3378,1296,8060,320,35797,1702,10158,5045,570,1115,31471,9057,3769,11682,311,64327,1596,11,13239,304,264,6020,4814,315,220,15,13,931,931,931,931,931,15287,38842,627,39734,926,10360,25,220,15,13,24,198,793,1829,86194,937,5441,25,220,15,13,931,931,931,931,931,15287,38842],"total_duration":48948957600,"load_duration":6695614100,"prompt_eval_count":304,"prompt_eval_duration":26751472600,"eval_count":92,"eval_duration":15335004000}
[NLP Mapping flags] strongCompletion:false, exculpatory:false, accepted:false, conclusiveCompletion:false
[NLP Mapping] evidenceFound: {} rationaleFound: { PARTY_A_WINS: [ 'failed' ] } mappedVerdict: PARTY_A_WINS confidence: 0.75 foundKeywords: [ 'failed' ]
[MERGE] LLM verdict: undefined NLP mapped verdict: PARTY_A_WINS LLM confidence: 0 NLP confidence: 0.75
[MERGE] Rationale keywords found: []
[MERGE] Final merged verdict: PARTY_A_WINS Confidence: 0.75 Source: NLP_HIGH_CONFIDENCE
[MERGE] Final merged rationale (truncated 1000 chars): VERDICT: PARTY_A_WINS
RATIONALE: The contract dispute indicates that PARTY_B failed to deliver the expected functionality, as evidenced by the CCIP test failure (ADMIN_BYPASS). This breach caused material harm to PARTY_A, resulting in a financial loss of 0.000000000000000288 ETH.
CONFIDENCE: 0.9
REIMBURSEMENT: 0.000000000000000288 ETH
✅ CCIP arbitration completed for request test-1761064355116
🟢 [callOllama] Ollama response: {"model":"llama3.2:latest","created_at":"2025-10-21T16:33:39.4838194Z","response":"VERDICT: PARTY_A_WINS\nRATIONALE: The contract specifies a requested amount of 0.000000000000000288 ETH, which was not fulfilled by PARTY_B as indicated by the CCIP test evidence (ADMIN_BYPASS). This breach caused material harm to PARTY_A.\nCONFIDENCE: 0.9\nREIMBURSEMENT: 0.000000000000000288 ETH","done":true,"done_reason":"stop","context":[128006,9125,128007,271,38766,1303,33025,2696,25,6790,220,2366,18,271,128009,128006,882,128007,271,36,7635,10360,512,3791,3378,1296,6029,320,35797,1702,10158,5045,340,5910,42205,512,3791,3378,11511,12,19368,59895,2214,6274,198,286,4185,8660,4078,25,18052,4552,198,286,6274,291,26868,25,220,15,13,931,931,931,931,931,15287,38842,198,286,24086,9805,25,5324,1985,794,1904,534,21894,93443,3533,25,9987,271,2675,527,459,59057,859,13,763,420,26086,11,64327,1596,374,279,3016,14,8017,519,889,33230,279,5226,11,323,64327,1702,374,279,31072,2754,72791,889,574,22163,311,2804,279,990,13,38527,3059,279,6029,323,5226,26086,3485,13,31001,422,64327,1596,15160,320,21152,613,555,64327,1702,705,64327,1702,15160,320,21152,613,555,64327,1596,705,5782,1106,965,984,22875,320,2201,31471,477,27848,9306,705,477,72752,320,1354,27781,6029,570,5422,17959,25,482,64327,1596,2832,9751,422,64327,1702,82166,279,5226,14718,3769,11682,311,64327,1596,13,482,5782,1106,965,984,22875,422,6493,4893,1051,11928,323,912,3769,6020,4814,10222,13,482,64327,1702,2832,9751,422,64327,1596,82166,13,482,72752,422,6029,374,39413,477,55861,13,40665,701,5597,304,4154,6966,9109,420,3645,1473,3848,35,15149,25,510,34590,56,1596,2832,9751,477,64327,1702,2832,9751,477,5782,1106,965,984,22875,477,72752,933,55871,25940,25,510,6796,16540,933,39734,926,10360,25,510,15,13,15,12,16,13,15,477,11668,933,793,1829,86194,937,5441,25,510,6173,477,43969,60,128009,128006,78191,128007,271,3848,35,15149,25,64327,1596,2832,9751,198,55871,25940,25,578,5226,30202,264,11472,3392,315,220,15,13,931,931,931,931,931,15287,38842,11,902,574,539,41834,555,64327,1702,439,16717,555,279,13844,3378,1296,6029,320,35797,1702,10158,5045,570,1115,31471,9057,3769,11682,311,64327,1596,627,39734,926,10360,25,220,15,13,24,198,793,1829,86194,937,5441,25,220,15,13,931,931,931,931,931,15287,38842],"total_duration":24107568300,"load_duration":298659600,"prompt_eval_count":304,"prompt_eval_duration":197510900,"eval_count":86,"eval_duration":15006398800}
[NLP Mapping flags] strongCompletion:true, exculpatory:false, accepted:false, conclusiveCompletion:false
[NLP Mapping] evidenceFound: {} rationaleFound: {} mappedVerdict: undefined confidence: 0.4 foundKeywords: []
[MERGE] Both verdicts undefined → fallback to DRAW
✅ CCIP arbitration completed for request test-1761064395361
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
✅ CCIP Arbitration Integration initialized
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
📡 CCIP Endpoints:
🔗 CCIP Integration initialized successfully
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
   • Status: http://localhost:3001/api/v7/ccip/status
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 CCIP Event Listener started successfully
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
  isProduction: true
🚀 ArbiTrust V7 Server running on port 3001
🏭 Production Mode: Helia local node (127.0.0.1:5001)
📡 Health check: http://localhost:3001/api/v7/arbitration/health
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
📡 CCIP Endpoints:
🔗 CCIP Integration initialized successfully
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 CCIP Event Listener started successfully
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=19
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
📋 CCIP Contracts loaded:
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=23
[STUB] POST /api/v7/dispute/report called
Headers: {
  "user-agent": "Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.26100.6899",
  "content-type": "application/json",
  "host": "localhost:3001",
  "content-length": "23",
  "expect": "100-continue",
  "connection": "Keep-Alive"
}
Body: {
  "test": true
}
RawBody: {
    "test":  true
}
[REQ] GET /api/v7/ccip/status content-type= content-length=
[REQ] GET /favicon.ico content-type= content-length=
[REQ] GET /api/v7/ccip/start content-type= content-length=
[REQ] GET /api/v7/ccip/test content-type= content-length=
[REQ] GET /api/v7/arbitration/health content-type= content-length=
[REQ] GET /api/v7/ccip/test content-type= content-length=
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
🏭 Production Mode: Helia local node (127.0.0.1:5001)
📡 Health check: http://localhost:3001/api/v7/arbitration/health
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
🔗 CCIP Integration initialized successfully
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[REQ] POST /api/v7/dispute/report content-type=application/json content-length=80
[API] POST /api/v7/dispute/report called
Headers: {
  "user-agent": "Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.26100.6899",
  "content-type": "application/json",
  "host": "localhost:3001",
  "content-length": "80",
  "connection": "Keep-Alive"
}
Body: {
  "caseId": "case_123",
  "evidence": {
    "text": "sample evidence"
  },
  "autoArbitrate": true
}
RawBody: {"caseId":"case_123","evidence":{"text":"sample evidence"},"autoArbitrate":true}
🟡 [callOllama] Sending prompt to Ollama: EVIDENCE:

CONTRACT:
GENERIC CONTRACT FOR TESTING
DISPUTE_ID: case_123

You are an arbitrator. In this dispute, PARTY_A is the client/claimant who initiated the contract, and PARTY_B is the contractor/supplier who was hired to perform the work. Analyze the evidence and contract dispute above. Determine if PARTY_A wins (breach by PARTY_B), PARTY_B wins (breach by PARTY_A), NO_PENALTY (no breach or mutual agreement), or DRAW (insufficient evidence). Key guidelines: - PARTY_A_WINS if PARTY_B breached the contract causing material harm to PARTY_A. - NO_PENALTY if deliverables were accepted and no material financial loss occurred. - PARTY_B_WINS if PARTY_A breached. - DRAW if evidence is insufficient or ambiguous. Provide your decision in EXACTLY this format:

VERDICT: [PARTY_A_WINS or PARTY_B_WINS or NO_PENALTY or DRAW]
RATIONALE: [brief explanation]
CONFIDENCE: [0.0-1.0 or percentage]
REIMBURSEMENT: [amount or NONE]
🟢 [callOllama] Ollama response: {"model":"llama3.2:latest","created_at":"2025-10-21T21:53:34.2145125Z","response":"VERDICT: PARTY_A_WINS\nRATIONALE: The contract specifies that PARTY_B is responsible for delivering a certain product, and the dispute revolves around the quality of this delivery. If PARTY_B breached the contract by providing substandard goods, it would cause material harm to PARTY_A.\nCONFIDENCE: 0.8\nREIMBURSEMENT: $100,000","done":true,"done_reason":"stop","context":[128006,9125,128007,271,38766,1303,33025,2696,25,6790,220,2366,18,271,128009,128006,882,128007,271,36,7635,10360,1473,5910,42205,512,11332,37016,17564,4716,96635,198,21894,93443,3533,25,1162,62,4513,271,2675,527,459,59057,859,13,763,420,26086,11,64327,1596,374,279,3016,14,8017,519,889,33230,279,5226,11,323,64327,1702,374,279,31072,2754,72791,889,574,22163,311,2804,279,990,13,38527,3059,279,6029,323,5226,26086,3485,13,31001,422,64327,1596,15160,320,21152,613,555,64327,1702,705,64327,1702,15160,320,21152,613,555,64327,1596,705,5782,1106,965,984,22875,320,2201,31471,477,27848,9306,705,477,72752,320,1354,27781,6029,570,5422,17959,25,482,64327,1596,2832,9751,422,64327,1702,82166,279,5226,14718,3769,11682,311,64327,1596,13,482,5782,1106,965,984,22875,422,6493,4893,1051,11928,323,912,3769,6020,4814,10222,13,482,64327,1702,2832,9751,422,64327,1596,82166,13,482,72752,422,6029,374,39413,477,55861,13,40665,701,5597,304,4154,6966,9109,420,3645,1473,3848,35,15149,25,510,34590,56,1596,2832,9751,477,64327,1702,2832,9751,477,5782,1106,965,984,22875,477,72752,933,55871,25940,25,510,6796,16540,933,39734,926,10360,25,510,15,13,15,12,16,13,15,477,11668,933,793,1829,86194,937,5441,25,510,6173,477,43969,60,128009,128006,78191,128007,271,3848,35,15149,25,64327,1596,2832,9751,198,55871,25940,25,578,5226,30202,430,64327,1702,374,8647,369,24944,264,3738,2027,11,323,279,26086,79476,2212,279,4367,315,420,9889,13,1442,64327,1702,82166,279,5226,555,8405,1207,20885,11822,11,433,1053,5353,3769,11682,311,64327,1596,627,39734,926,10360,25,220,15,13,23,198,793,1829,86194,937,5441,25,400,1041,11,931],"total_duration":27249547700,"load_duration":5599205400,"prompt_eval_count":260,"prompt_eval_duration":14274764400,"eval_count":78,"eval_duration":6797967600}
[NLP Mapping flags] strongCompletion:false, exculpatory:false, accepted:false, conclusiveCompletion:false
[NLP Mapping] evidenceFound: {} rationaleFound: { PARTY_A_WINS: [ 'substandard' ] } mappedVerdict: PARTY_A_WINS confidence: 0.75 foundKeywords: [ 'substandard' ]
[MERGE] Rationale keywords found: []
[MERGE] LLM verdict: undefined NLP mapped verdict: PARTY_A_WINS LLM confidence: 0 NLP confidence: 0.75
[MERGE] Final merged verdict: PARTY_A_WINS Confidence: 0.75 Source: NLP_HIGH_CONFIDENCE
[MERGE] Final merged rationale (truncated 1000 chars): VERDICT: PARTY_A_WINS
RATIONALE: The contract specifies that PARTY_B is responsible for delivering a certain product, and the dispute revolves around the quality of this delivery. If PARTY_B breached the contract by providing substandard goods, it would cause material harm to PARTY_A.
CONFIDENCE: 0.8
REIMBURSEMENT: $100,000
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
🔧 Admin forwarder endpoints mounted at /api/admin/forwarder
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[REQ] GET /api/v7/arbitration/health content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=217
[REQ] GET /api/admin/forwarder/status content-type= content-length=
[REQ] GET /api/v7/arbitration/health content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=217
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=112
[REQ] GET /api/admin/forwarder/status content-type= content-length=
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
🔧 Admin forwarder endpoints mounted at /api/admin/forwarder
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
🔧 Admin forwarder endpoints mounted at /api/admin/forwarder
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Test: POST http://localhost:3001/api/v7/ccip/test
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
🔧 Admin forwarder endpoints mounted at /api/admin/forwarder
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
📋 CCIP Contracts loaded:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
📡 CCIP Endpoints:
🔗 CCIP Integration initialized successfully
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
🔧 Admin forwarder endpoints mounted at /api/admin/forwarder
[REQ] GET /api/v7/arbitration/health content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=217
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=80
[REQ] GET /api/v7/debug/development-info content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=80
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[REQ] GET /api/v7/arbitration/health content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=217
[REQ] GET /api/v7/arbitration/health content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=217
[REQ] GET /api/admin/forwarder/status content-type= content-length=
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=80
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isProduction: true
  isDevelopment: false
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=80
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
  isProduction: true
🚀 ArbiTrust V7 Server running on port 3001
🏭 Production Mode: Helia local node (127.0.0.1:5001)
📡 Health check: http://localhost:3001/api/v7/arbitration/health
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔐 CCIP sender: signer 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 already authorized
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
📡 CCIP Endpoints:
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[REQ] POST /api/evidence/upload content-type=application/json content-length=221
heliaLocal: unixfsModule keys -> components
heliaLocal: unixfsModule.add typeof -> undefined
heliaLocal: unixfsModule.components typeof -> object
heliaLocal: unixfsModule.components.addAll typeof -> undefined
heliaLocal: unixfsModule.components.cat typeof -> undefined
✅ In-process Helia started.
heliaLocal: addEvidence -> available unixfsModule keys -> components
heliaLocal: addEvidence -> available heliaInstance keys -> libp2p, blockstore, datastore, pins
heliaLocal: addEvidence -> used unixfsModule.addAll
helia: addResult -> {"cid":"bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74","size":221}
helia: addResult typeof -> object keys -> [ 'cid', 'size' ]
helia: normalized cid -> bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74
helia: stored evidence, cid= bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74 size= 221
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=177
[REQ] POST /api/evidence/upload content-type=application/json content-length=221
heliaLocal: addEvidence -> available unixfsModule keys -> components
heliaLocal: addEvidence -> available heliaInstance keys -> libp2p, blockstore, datastore, pins
heliaLocal: addEvidence -> used unixfsModule.addAll
helia: addResult -> {"cid":"bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74","size":221}
helia: addResult typeof -> object keys -> [ 'cid', 'size' ]
helia: normalized cid -> bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74
helia: stored evidence, cid= bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74 size= 221
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=177
[REQ] POST /api/evidence/upload content-type=application/json content-length=221
heliaLocal: addEvidence -> available unixfsModule keys -> components
heliaLocal: addEvidence -> available heliaInstance keys -> libp2p, blockstore, datastore, pins
heliaLocal: addEvidence -> used unixfsModule.addAll
helia: addResult -> {"cid":"bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74","size":221}
helia: addResult typeof -> object keys -> [ 'cid', 'size' ]
helia: normalized cid -> bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74
helia: stored evidence, cid= bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74 size= 221
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=177
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
📡 CCIP Endpoints:
🔗 CCIP Integration initialized successfully
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[REQ] POST /api/evidence/upload content-type=application/json content-length=221
heliaLocal: unixfsModule.add typeof -> undefined
heliaLocal: unixfsModule.components typeof -> object
heliaLocal: unixfsModule keys -> components
heliaLocal: unixfsModule.components.addAll typeof -> undefined
heliaLocal: unixfsModule.components.cat typeof -> undefined
heliaLocal: addEvidence -> available unixfsModule keys -> components
✅ In-process Helia started.
heliaLocal: addEvidence -> available heliaInstance keys -> libp2p, blockstore, datastore, pins
heliaLocal: addEvidence -> used unixfsModule.addAll
helia: addResult -> {"cid":"bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74","size":221}
helia: normalized cid -> bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74
helia: addResult typeof -> object keys -> [ 'cid', 'size' ]
helia: stored evidence, cid= bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74 size= 221
[REQ] POST /api/admin/forwarder/forward-evidence content-type=application/json content-length=177
heliaLocal: getEvidence -> using unixfsModule.cat
🟡 [callOllama] Sending prompt to Ollama: You are an impartial contract arbitrator.
Below are the EVIDENCE and CONTRACT for a dispute.
DISPUTE_ID: 04eda3df-b513-4a5a-aaeb-b5325ea6550e

INSTRUCTIONS:
- Read the EVIDENCE and CONTRACT carefully.
- Return ONLY a single JSON object that exactly matches the schema below (no surrounding commentary).
- Schema: {"type":"object","properties":{"verdict":"one of ['PARTY_A_WINS','PARTY_B_WINS','NO_PENALTY','DRAW']","confidence":"number between 0.0 and 1.0","rationale":"string explanation","reimbursement":"number (amount) or null"}}
- Fields: verdict (one of the four canonical labels), confidence (0.0-1.0), rationale (brief), reimbursement (amount or null).

EXAMPLES:
INPUT_EVIDENCE: Party B delivered all work on time and client accepted final deliverables; invoices paid in full.
INPUT_CONTRACT: Standard service contract, milestones completed.
OUTPUT_JSON: {"verdict":"NO_PENALTY","confidence":0.9,"rationale":"Deliverables accepted and payments processed; no material loss.","reimbursement":null}
---
INPUT_EVIDENCE: Client reports missing modules, delayed delivery, and financial loss due to missed deadline.
INPUT_CONTRACT: Schedule critical; delays incur liquidated damages.
OUTPUT_JSON: {"verdict":"PARTY_A_WINS","confidence":0.85,"rationale":"Delays caused financial loss and breach of schedule clauses.","reimbursement":1500}
---

EVIDENCE:
{"type":"customClause","content":"This is test evidence for an end-to-end forwarder run.","description":"E2E test evidence","metadata":{"contractAddress":"0x0000000000000000000000000000000000000000","disputeType":"TEST"}}

CONTRACT:
0x0000000000000000000000000000000000000000

Now produce the OUTPUT_JSON for the provided EVIDENCE and CONTRACT. ONLY return the JSON object.
[REQ] GET /api/admin/forwarder/status content-type= content-length=
🟢 [callOllama] Ollama response: {"model":"llama3.2:latest","created_at":"2025-10-22T18:17:39.6167486Z","response":"{\"verdict\":\"NO_PENALTY\",\"confidence\":1.0,\"rationale\":\"Custom clause specifies test evidence, indicating no material breach.\",\"reimbursement\":null}","done":true,"done_reason":"stop","context":[128006,9125,128007,271,38766,1303,33025,2696,25,6790,220,2366,18,271,128009,128006,882,128007,271,2675,527,459,68824,5226,59057,859,627,39314,527,279,469,7635,10360,323,17564,369,264,26086,627,21894,93443,3533,25,220,2371,14151,18,3013,1481,21164,12,19,64,20,64,12,5418,3141,1481,20711,20,12791,15573,15,68,271,691,93631,512,12,4557,279,469,7635,10360,323,17564,15884,627,12,3494,27785,264,3254,4823,1665,430,7041,9248,279,11036,3770,320,2201,14932,31710,4390,12,12824,25,5324,1337,3332,1735,2247,13495,23118,424,8644,3332,606,315,2570,34590,56,1596,2832,9751,1882,34590,56,1702,2832,9751,1882,9173,1106,965,984,22875,1882,78135,663,2247,83029,3332,4174,1990,220,15,13,15,323,220,16,13,15,2247,2214,1604,3332,928,16540,2247,265,318,52173,3332,4174,320,6173,8,477,854,96742,12,25599,25,36543,320,606,315,279,3116,43553,9382,705,12410,320,15,13,15,12,16,13,15,705,57916,320,6796,705,71111,320,6173,477,854,3677,96975,50,512,30521,2135,7635,10360,25,8722,426,12886,682,990,389,892,323,3016,11928,1620,6493,4893,26,65152,7318,304,2539,627,30521,4405,42205,25,12028,2532,5226,11,69376,8308,627,31401,26426,25,5324,424,8644,3332,9173,1106,965,984,22875,2247,83029,794,15,13,24,1359,2214,1604,3332,16939,1553,4893,11928,323,14507,15590,26,912,3769,4814,48991,265,318,52173,794,2994,534,11192,30521,2135,7635,10360,25,8589,6821,7554,13761,11,23540,9889,11,323,6020,4814,4245,311,13942,22143,627,30521,4405,42205,25,24416,9200,26,32174,62622,14812,660,26186,627,31401,26426,25,5324,424,8644,3332,34590,56,1596,2832,9751,2247,83029,794,15,13,5313,1359,2214,1604,3332,16939,954,9057,6020,4814,323,31471,315,9899,50198,48991,265,318,52173,794,3965,15,534,45464,36,7635,10360,512,5018,1337,3332,9342,29582,2247,1834,3332,2028,374,1296,6029,369,459,842,4791,13368,4741,261,1629,48991,4789,3332,36,17,36,1296,6029,2247,18103,23118,20871,4383,3332,15,87,931,931,931,931,931,931,931,931,931,931,931,931,931,15,2247,4338,8660,941,3332,10238,9388,633,5910,42205,512,15,87,931,931,931,931,931,931,931,931,931,931,931,931,931,15,271,7184,8356,279,32090,26426,369,279,3984,469,7635,10360,323,17564,13,27785,471,279,4823,1665,13,128009,128006,78191,128007,271,5018,424,8644,3332,9173,1106,965,984,22875,2247,83029,794,16,13,15,1359,2214,1604,3332,10480,22381,30202,1296,6029,11,19392,912,3769,31471,48991,265,318,52173,794,2994,92],"total_duration":48899771800,"load_duration":4649330500,"prompt_eval_count":459,"prompt_eval_duration":38686799300,"eval_count":37,"eval_duration":5375772600}
[REQ] GET /api/evidence/retrieve/bafkreihiyn4hmskhhjsymhn75fnt6wyimf4hu4iiniegfdclgut23y3v74 content-type= content-length=
heliaLocal: getEvidence -> using unixfsModule.cat
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
🏭 Production Mode: ENABLED - Using Helia local node
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
   • Status: http://localhost:3001/api/v7/ccip/status
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 CCIP Event Listener started successfully
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
[REQ] GET /api/v7/ccip/test content-type= content-length=
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
🔗 CCIP Integration initialized successfully
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
   • Status: http://localhost:3001/api/v7/ccip/status
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
   • Status: http://localhost:3001/api/v7/ccip/status
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
👂 CCIP Event Listener started automatically
✅ CCIP Arbitration Integration initialized
✅ CCIP sender: signer authorized (owner flow)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
🏭 Production Mode: ENABLED - Using Helia local node
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
   • Status: http://localhost:3001/api/v7/ccip/status
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 CCIP Event Listener started automatically
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🔗 Helia Endpoint: http://127.0.0.1:5001
🏭 Production Mode: ENABLED - Using Helia local node
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Status: http://localhost:3001/api/v7/ccip/status
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 CCIP Event Listener started automatically
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started successfully
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
[rotating-logger] Initialized rotator in C:\Users\user\vsc\blockchain\LegalContractsDemo\server\logs
🔧 Environment Check:
  NODE_ENV: production
  isDevelopment: false
  isProduction: true
🏭 Production Mode: ENABLED - Using Helia local node
🔗 Helia Endpoint: http://127.0.0.1:5001
🚀 ArbiTrust V7 Server running on port 3001
📡 Health check: http://localhost:3001/api/v7/arbitration/health
🏭 Production Mode: Helia local node (127.0.0.1:5001)
✅ Ollama module loaded successfully
📋 Addresses resolved:
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
📋 CCIP Contracts loaded:
  • Sender: 0x8A791620dd6260079BF849Dc5567aDC3F2FdC318
  • Receiver: 0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  • ArbitrationService: 0x5FC8d32690cc91D4c39d9d3abcBD16989F875707
🔧 CCIP sender: signer is owner, authorizing signer on-chain
🔧 CCIP sender: signer is owner, authorizing signer on-chain
✅ CCIP Arbitration Integration initialized
✅ CCIP sender: signer authorized (owner flow)
✅ CCIP Arbitration Integration initialized
🔗 CCIP Integration initialized successfully
📡 CCIP Endpoints:
   • Status: http://localhost:3001/api/v7/ccip/status
   • Start Listener: POST http://localhost:3001/api/v7/ccip/start
   • Test: POST http://localhost:3001/api/v7/ccip/test
📋 Available events: [
  'ArbitrationDecisionReceived',
  'ArbitrationExecuted',
  'ArbitrationForwardFailed',
  'ArbitrationRequestSent',
  'SenderAuthorized',
  'SourceChainAuthorized'
]
👂 Listening for ArbitrationRequestSent events
👂 Listening for ArbitrationDecisionReceived events
👂 CCIP Event Listener started automatically
👂 CCIP Event Listener started successfully
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
@TODO TypeError: results is not iterable
    at FilterIdEventSubscriber._emitResults (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:154:30)
    at #poll (file:///C:/Users/user/vsc/blockchain/LegalContractsDemo/server/node_modules/ethers/lib.esm/providers/subscriber-filterid.js:88:24)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
