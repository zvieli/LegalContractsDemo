C:\Users\user\vsc\blockchain\LegalContractsDemo\front\dist\assets\index-B9MLP0nA.js:1:import{r as p,B as dt,j as e,J as at,k as Be,Z as st,t as He,g as sn,a as on,P as ea,p as _e,f as ne,c as be,d as cn,e as ln,W as dn,h as un,C as hn,l as Sa,R as Ia,m as pn}from"./vendor-D1c1F3Y9.js";import{g as ta,c as le,a as aa,l as fn}from"./contracts-DB358mxz.js";(function(){const a=document.createElement("link").relList;if(a&&a.supports&&a.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const c of i.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function t(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function s(n){if(n.ep)return;n.ep=!0;const i=t(n);fetch(n.href,i)}})();if(typeof window<"u"&&(typeof window.global>"u"&&(window.global=window),typeof window.Buffer>"u")){class l extends Uint8Array{constructor(t){typeof t=="number"?super(t):typeof t=="string"?super(l._fromString(t)):t instanceof ArrayBuffer?super(t):Array.isArray(t)?super(t):super(t)}static _fromString(t){return new TextEncoder().encode(t)}static from(t,s){return typeof t=="string"?new l(l._fromString(t)):t instanceof ArrayBuffer?new l(t):Array.isArray(t)?new l(t):new l(t)}static alloc(t){return new l(t)}static concat(t){const s=t.reduce((c,d)=>c+d.length,0),n=new l(s);let i=0;for(const c of t)n.set(c,i),i+=c.length;return n}toString(t="utf8"){return t==="hex"?Array.from(this).map(n=>n.toString(16).padStart(2,"0")).join(""):new TextDecoder().decode(this)}}window.Buffer=l}const Ea={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,VITE_ADMIN_PUBLIC_KEY:"8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5",VITE_E2E_TESTING:"false",VITE_EVIDENCE_HOST_BASE:"http://127.0.0.1:3000/utils/evidence",VITE_EVIDENCE_SUBMIT_ENDPOINT:"http://127.0.0.1:5001/submit-evidence",VITE_FACTORY_ADDRESS:"",VITE_PLATFORM_ADMIN:"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",VITE_RPC_URL:"http://127.0.0.1:8545"},ka=p.createContext();function mn({children:l}){const[a,t]=p.useState(null),[s,n]=p.useState(null),[i,c]=p.useState(null),[d,r]=p.useState(null),[h,u]=p.useState(!1),[m,w]=p.useState(!0),[f,g]=p.useState(!1);p.useEffect(()=>((async()=>{if(typeof window<"u"&&window.ethereum)try{const I=new dt(window.ethereum);t(I);const D=await window.ethereum.request({method:"eth_accounts"});if(D.length>0)try{const T=await I.getSigner(D[0]);n(T),c(D[0]);const H=await I.getNetwork();r(Number(H.chainId)),u(!0)}catch{await b()}}catch(I){console.error("Error initializing provider:",I)}w(!1)})(),typeof window<"u"&&window.ethereum&&(window.ethereum.on("accountsChanged",x),window.ethereum.on("chainChanged",j)),()=>{typeof window<"u"&&window.ethereum&&(window.ethereum.removeListener("accountsChanged",x),window.ethereum.removeListener("chainChanged",j))}),[]);const x=A=>{if(A.length===0)y();else{const I=A[0];c(I),u(!0),(async()=>{try{let D=a;if(!D&&typeof window<"u"&&window.ethereum&&(D=new dt(window.ethereum),t(D)),D){const T=await D.getSigner(I);n(T);const H=await D.getNetwork();r(Number(H.chainId))}}catch(D){console.error("Error updating signer on accountsChanged:",D)}})()}},j=A=>{const I=parseInt(A,16);r(I),(async()=>{try{if(typeof window<"u"&&window.ethereum){const D=new dt(window.ethereum);t(D);const T=await window.ethereum.request({method:"eth_accounts"}).catch(()=>[]);if(T&&T[0]){const H=await D.getSigner(T[0]);n(H),c(T[0]),u(!0)}else n(null),c(null),u(!1)}}catch(D){console.error("Error handling chainChanged:",D),window.location.reload()}})()},b=async()=>{if(f){console.log("Wallet connection already in progress...");return}if(typeof window>"u"||!window.ethereum){alert("Please install MetaMask!");return}try{g(!0),w(!0);const A=await window.ethereum.request({method:"eth_requestAccounts"}),I=new dt(window.ethereum),D=await I.getSigner(A[0]),T=await I.getNetwork();t(I),n(D),c(A[0]),r(Number(T.chainId)),u(!0)}catch(A){console.error("Error connecting wallet:",A),A.code===-32002?alert("MetaMask is already processing your request. Please check your MetaMask window."):alert("Error connecting wallet: "+A.message)}finally{w(!1),g(!1)}},y=()=>{n(null),c(null),u(!1),r(null)},S={provider:a,signer:s,account:i,chainId:d,isConnected:h,loading:m,isConnecting:f,connectWallet:b,disconnectWallet:y,refresh:async()=>{try{if(typeof window<"u"&&window.ethereum){const A=new dt(window.ethereum);t(A);const I=await window.ethereum.request({method:"eth_accounts"}).catch(()=>[]);if(I&&I[0]){const D=await A.getSigner(I[0]);n(D),c(I[0]);const T=await A.getNetwork();r(Number(T.chainId)),u(!0)}else n(null),c(null),u(!1)}}catch(A){console.error("Error refreshing provider/signer:",A)}}};return e.jsx(ka.Provider,{value:S,children:l})}const Fe=()=>{const l=p.useContext(ka);if(!l)throw new Error("useEthers must be used within an EthersProvider");return l};function gn(){const{account:l,isConnected:a,loading:t,isConnecting:s,connectWallet:n,disconnectWallet:i}=Fe(),c=r=>r?`${r.slice(0,6)}...${r.slice(-4)}`:"",d=async()=>{if(s){console.log("Connection already in progress...");return}await n()};return t?e.jsx("div",{className:"wallet-connector",children:e.jsx("div",{className:"wallet-loading",children:"Loading..."})}):e.jsx("div",{className:"wallet-connector",children:a&&l?e.jsxs("div",{className:"connected-wallet",children:[e.jsxs("span",{className:"wallet-address",children:[e.jsx("i",{className:"fas fa-wallet"}),c(l)]}),e.jsx("button",{onClick:i,className:"disconnect-btn","aria-label":"Disconnect wallet",disabled:s,children:e.jsx("i",{className:"fas fa-sign-out-alt"})})]}):e.jsxs("button",{onClick:d,className:"connect-btn","aria-label":"Connect wallet",disabled:s,children:[e.jsx("i",{className:"fas fa-plug"}),s?"Connecting...":"Connect Wallet"]})})}function yn(){const[l,a]=p.useState(!1),{account:t}=Fe(),[s,n]=p.useState(!1),[i,c]=p.useState(!1);p.useEffect(()=>{const m="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";try{if(!t){n(!0),c(!0);return}const w=t.toLowerCase()===m.toLowerCase();n(w),c(w)}catch{n(!1),c(!1)}},[t]);const d=()=>{a(!l)},h=t&&t.toLowerCase()==="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266".toLowerCase(),u=[{label:"Home",path:"/",icon:"fas fa-home"},h?null:{label:"Create Contract",path:"/create",icon:"fas fa-plus"},{label:"My Contracts",path:"/dashboard",icon:"fas fa-file-contract"},s?{label:"Arbitration",path:"/arbitration",icon:"fas fa-scale-balanced"}:null,{label:"About",path:"/about",icon:"fas fa-info-circle"}].filter(Boolean);return e.jsx("header",{className:"header",children:e.jsx("div",{className:"container",children:e.jsxs("div",{className:"header-content",children:[e.jsxs("div",{className:"logo",children:[e.jsxs("svg",{width:"40",height:"40",viewBox:"0 0 512 512",fill:"currentColor",className:"logo-icon",children:[e.jsx("defs",{children:e.jsxs("linearGradient",{id:"lcGradient",x1:"64",y1:"64",x2:"448",y2:"448",gradientUnits:"userSpaceOnUse",children:[e.jsx("stop",{offset:"0",stopColor:"#7C3AED"}),e.jsx("stop",{offset:"1",stopColor:"#06B6D4"})]})}),e.jsx("path",{d:"M256 36L430 134v150c0 104-78 198-174 206-96-8-174-102-174-206V134l174-98Z",fill:"url(#lcGradient)",opacity:"0.12"}),e.jsx("path",{d:"M256 36L430 134v150c0 104-78 198-174 206-96-8-174-102-174-206V134l174-98Z",stroke:"currentColor",strokeWidth:"18",strokeLinejoin:"round",fill:"none"}),e.jsx("path",{d:"M256 124v172M164 184h184",stroke:"currentColor",strokeWidth:"16",strokeLinecap:"round",fill:"none"}),e.jsx("path",{d:"M188 184c0 0-28 44-28 62a44 44 0 0 0 88 0c0-18-28-62-28-62",stroke:"currentColor",strokeWidth:"14",strokeLinecap:"round",strokeLinejoin:"round",fill:"none"}),e.jsx("path",{d:"M324 184c0 0-28 44-28 62a44 44 0 0 0 88 0c0-18-28-62-28-62",stroke:"currentColor",strokeWidth:"14",strokeLinecap:"round",strokeLinejoin:"round",fill:"none"}),e.jsx("path",{d:"M232 228a28 28 0 0 1 28-28h16a28 28 0 0 1 0 56h-16",stroke:"currentColor",strokeWidth:"12",strokeLinecap:"round",fill:"none"}),e.jsx("path",{d:"M280 252a28 28 0 0 1-28 28h-16a28 28 0 0 1 0-56h16",stroke:"currentColor",strokeWidth:"12",strokeLinecap:"round",fill:"none"}),e.jsx("path",{d:"M164 344h184",stroke:"currentColor",strokeWidth:"12",strokeLinecap:"round"}),e.jsx("circle",{cx:"256",cy:"112",r:"6",fill:"currentColor"})]}),e.jsxs("div",{className:"logo-text",children:[e.jsx("h1",{children:"ArbiTrust"}),e.jsx("span",{children:"On-chain Agreements"})]})]}),e.jsx("nav",{className:`nav ${l?"nav-open":""}`,children:e.jsx("ul",{className:"nav-list",children:u.map(m=>e.jsx("li",{className:"nav-item",children:e.jsxs("a",{href:m.path,className:"nav-link",children:[e.jsx("i",{className:m.icon}),e.jsx("span",{children:m.label})]})},m.path))})}),e.jsxs("div",{className:"header-actions",children:[e.jsx(gn,{}),e.jsxs("button",{className:"mobile-menu-toggle",onClick:d,"aria-label":"Toggle mobile menu",children:[e.jsx("span",{}),e.jsx("span",{}),e.jsx("span",{})]})]})]})})})}function wn(){const l=new Date().getFullYear(),{account:a}=Fe(),s=a&&a.toLowerCase()==="0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266".toLowerCase();return e.jsx("footer",{className:"footer",children:e.jsxs("div",{className:"container",children:[e.jsxs("div",{className:"footer-content",children:[e.jsxs("div",{className:"footer-section",children:[e.jsxs("div",{className:"footer-logo",children:[e.jsxs("svg",{width:"30",height:"30",viewBox:"0 0 512 512",fill:"currentColor",children:[e.jsx("path",{d:"M256 36L430 134v150c0 104-78 198-174 206-96-8-174-102-174-206V134l174-98Z",fill:"url(#lcGradient)",opacity:"0.12"}),e.jsx("path",{d:"M256 36L430 134v150c0 104-78 198-174 206-96-8-174-102-174-206V134l174-98Z",stroke:"currentColor",strokeWidth:"18",strokeLinejoin:"round",fill:"none"}),e.jsx("path",{d:"M256 124v172M164 184h184",stroke:"currentColor",strokeWidth:"16",strokeLinecap:"round",fill:"none"}),e.jsx("circle",{cx:"256",cy:"112",r:"6",fill:"currentColor"})]}),e.jsx("span",{children:"ArbiTrust"})]}),e.jsx("p",{children:"Advanced platform for creating and managing smart contracts on blockchain"})]}),e.jsxs("div",{className:"footer-section",children:[e.jsx("h4",{children:"Quick Links"}),e.jsxs("ul",{children:[e.jsx("li",{children:e.jsx("a",{href:"/",children:"Home"})}),!s&&e.jsx("li",{children:e.jsx("a",{href:"/create",children:"Create Contract"})}),e.jsx("li",{children:e.jsx("a",{href:"/contracts",children:"My Contracts"})}),e.jsx("li",{children:e.jsx("a",{href:"/arbitration",children:"Arbitration"})})]})]}),e.jsxs("div",{className:"footer-section",children:[e.jsx("h4",{children:"Developer"}),e.jsxs("div",{className:"developer-info",children:[e.jsx("p",{children:"Developed with ❤️ by"}),e.jsxs("a",{href:"https://www.linkedin.com/in/lior-zvieli-783107311/",target:"_blank",rel:"noopener noreferrer",className:"developer-link",children:[e.jsx("i",{className:"fab fa-linkedin"}),"Lior Zvieli"]})]})]}),e.jsxs("div",{className:"footer-section",children:[e.jsx("h4",{children:"Technology"}),e.jsxs("div",{className:"tech-stack",children:[e.jsxs("div",{className:"tech-item",children:[e.jsx("i",{className:"fab fa-react"}),e.jsx("span",{children:"React 19"})]}),e.jsxs("div",{className:"tech-item",children:[e.jsx("i",{className:"fab fa-ethereum"}),e.jsx("span",{children:"Ethereum"})]}),e.jsxs("div",{className:"tech-item",children:[e.jsx("i",{className:"fas fa-code"}),e.jsx("span",{children:"Solidity"})]})]})]})]}),e.jsx("div",{className:"footer-bottom",children:e.jsxs("p",{children:["© ",l," ArbiTrust. All rights reserved."]})})]})})}const xn="modulepreload",vn=function(l){return"/"+l},Aa={},We=function(a,t,s){let n=Promise.resolve();if(t&&t.length>0){let r=function(h){return Promise.all(h.map(u=>Promise.resolve(u).then(m=>({status:"fulfilled",value:m}),m=>({status:"rejected",reason:m}))))};document.getElementsByTagName("link");const c=document.querySelector("meta[property=csp-nonce]"),d=c?.nonce||c?.getAttribute("nonce");n=r(t.map(h=>{if(h=vn(h),h in Aa)return;Aa[h]=!0;const u=h.endsWith(".css"),m=u?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${h}"]${m}`))return;const w=document.createElement("link");if(w.rel=u?"stylesheet":xn,u||(w.as="script"),w.crossOrigin="",w.href=h,d&&w.setAttribute("nonce",d),document.head.appendChild(w),u)return new Promise((f,g)=>{w.addEventListener("load",f),w.addEventListener("error",()=>g(new Error(`Unable to preload CSS for ${h}`)))})}))}function i(c){const d=new Event("vite:preloadError",{cancelable:!0});if(d.payload=c,window.dispatchEvent(d),!d.defaultPrevented)throw c}return n.then(c=>{for(const d of c||[])d.status==="rejected"&&i(d.reason);return a().catch(i)})};function bn(){if(typeof window<"u"&&window.ethereum)return new dt(window.ethereum);try{return new at("http://127.0.0.1:8545")}catch{return null}}bn();new Proxy({},{get(l,a){return async function(){throw new Error(`Frontend helper: attempted to call contract.${String(a)} but no contract instance was provided. Use createContractInstance(name,address,signer) or pass a connected signer.`)}}});function na(l){return l?Be(He(l)):st}function ca(l){if(!l&&l!==0)return l;let a=String(l).trim();return a.startsWith("0x")&&(a=a.slice(2)),a}function ut(l){const a=ca(l),t=a.length/2,s=new Uint8Array(t);for(let n=0;n<t;n++)s[n]=parseInt(a.substr(n*2,2),16);return s}function Pa(l){return Array.from(l).map(a=>a.toString(16).padStart(2,"0")).join("")}function Lt(l){if(!l)throw new Error("public key required");let a=ca(l).toLowerCase();if(a.length===130&&a.startsWith("04"))return a;if(a.length===128)return("04"+a).toLowerCase();if(a.length===66&&(a.startsWith("02")||a.startsWith("03"))){const t=[()=>ea.fromHex(a),()=>ea.fromHex("0x"+a),()=>ea.fromHex(ut(a)),()=>ea.fromHex(Buffer.from(a,"hex"))];for(const s of t)try{const n=s();if(n&&typeof n.toRawBytes=="function")return Pa(n.toRawBytes(!1)).toLowerCase();if(n&&n.x!==void 0&&n.y!==void 0){const i=r=>{let h=typeof r=="bigint"?r.toString(16):String(r);return h.startsWith("0x")&&(h=h.slice(2)),h=h.padStart(64,"0"),h.slice(-64)},c=i(n.x),d=i(n.y);return("04"+c+d).toLowerCase()}}catch{}}return a.length===64?("04"+a).toLowerCase():a.toLowerCase()}async function La(l){const a=ca(l),t=ut(a),s=on(t,!1);return Pa(s).toLowerCase()}async function Ba(l,a){if(!l)throw new Error("private key required");const t=ut(ca(l)),s=typeof a=="string"?JSON.parse(a):a,n=ut(s.iv),i=Lt(s.ephemPublicKey),c=ut(i),d=ut(s.ciphertext),r=ut(s.mac),h=sn(t,c),u=h instanceof Uint8Array?h:new Uint8Array(h),m=u.length>32?u.slice(u.length-32):u,w=await globalThis.crypto.subtle.digest("SHA-256",m),f=new Uint8Array(w),g=new Uint8Array(d.length+r.length);g.set(d,0),g.set(r,d.length);const x=await globalThis.crypto.subtle.importKey("raw",f,"AES-GCM",!1,["decrypt"]);try{const j=await globalThis.crypto.subtle.decrypt({name:"AES-GCM",iv:n,tagLength:128},x,g);return new TextDecoder().decode(j)}catch(j){throw new Error("ecies-browser decryption failed: "+(j&&j.message?j.message:j))}}const ra={getPublicKeyFromPrivate:La,decryptWithPrivateKey:Ba},Cn=Object.freeze(Object.defineProperty({__proto__:null,decryptWithPrivateKey:Ba,default:ra,getPublicKeyFromPrivate:La,normalizePublicKeyHex:Lt},Symbol.toStringTag,{value:"Module"})),Ge=!1;function Fa(l){const a=l?String(l):"";return a?Be(He(a)):st}function Bt(l){const a=l?String(l):"";return a?Be(He(a)):st}async function Oa(l,a){if(!l)throw new Error("payload required");if(!a)throw new Error("adminPublicKey required for encryption");const t=Lt(String(a));try{const r=await We(()=>Promise.resolve().then(()=>Cn),void 0),h=r&&(r.default||r);if(h&&typeof h.encryptWithPublicKey=="function"){const u=await h.encryptWithPublicKey(t,String(l)),m=typeof u=="string"?u:JSON.stringify(u),w=Bt(m);return{ciphertext:m,digest:w}}}catch{}let s;try{s=(await We(async()=>{const{default:r}=await import("./vendor-D1c1F3Y9.js").then(h=>h.n);return{default:r}},[])).default||await We(()=>import("./vendor-D1c1F3Y9.js").then(r=>r.n),[])}catch{throw new Error("Client-side encryption requested but no encryption module is available. For production keep encryption in `tools/admin`. For local demos install `eth-crypto` in `front/`.")}const n=t.startsWith("0x")?t.slice(2):t,i=await s.encryptWithPublicKey(n,String(l)),c=typeof i=="string"?i:JSON.stringify(i),d=Bt(c);return{ciphertext:c,digest:d}}async function sa(l,a={}){const t=l?String(l):"";return a.encryptToAdminPubKey?await Oa(t,a.encryptToAdminPubKey):{digest:Fa(t)}}const Ft=Object.freeze(Object.defineProperty({__proto__:null,computeDigestForCiphertext:Bt,computeDigestForText:Fa,encryptToAdminPubKey:Oa,prepareEvidencePayload:sa},Symbol.toStringTag,{value:"Module"})),Ot={BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SSR:!1,VITE_ADMIN_PUBLIC_KEY:"8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5",VITE_E2E_TESTING:"false",VITE_EVIDENCE_HOST_BASE:"http://127.0.0.1:3000/utils/evidence",VITE_EVIDENCE_SUBMIT_ENDPOINT:"http://127.0.0.1:5001/submit-evidence",VITE_FACTORY_ADDRESS:"",VITE_PLATFORM_ADMIN:"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",VITE_RPC_URL:"http://127.0.0.1:8545"};function jn(){try{if(import.meta&&Ot)return"http://127.0.0.1:5001/submit-evidence"}catch{}try{if(typeof window<"u"&&window.__ENV__&&window.__ENV.VITE_EVIDENCE_SUBMIT_ENDPOINT)return window.__ENV__.VITE_EVIDENCE_SUBMIT_ENDPOINT}catch{}return null}function Nn(){try{if(import.meta&&Ot)return"8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5"}catch{}try{if(typeof window<"u"&&window.__ENV__&&window.__ENV.VITE_ADMIN_PUBLIC_KEY)return window.__ENV__.VITE_ADMIN_PUBLIC_KEY}catch{}return null}function Sn(){try{if(typeof window<"u"&&window.__ENV__&&window.__ENV.VITE_REQUIRE_EVIDENCE_UPLOAD)return String(window.__ENV__.VITE_REQUIRE_EVIDENCE_UPLOAD)==="true"}catch{}return!1}class Q{constructor(a,t){this.signer=a,this.chainId=t}async uploadEvidence(a){try{const t=a?String(a):"",s=jn(),n=Nn(),i=Sn();if(!s||!n){if(i)throw new Error("EVIDENCE_UPLOAD_REQUIRED: evidence endpoint or admin public key not configured in frontend environment. Set VITE_EVIDENCE_SUBMIT_ENDPOINT and VITE_ADMIN_PUBLIC_KEY or disable VITE_REQUIRE_EVIDENCE_UPLOAD.");return na(t)}const{ciphertext:c,digest:d}=await sa(t,{encryptToAdminPubKey:n}),r=g=>!g||/^0x0{64}$/.test(String(g));if(!c||typeof c!="string"||c.length===0)throw new Error("Evidence preparation failed: ciphertext empty");if(r(d))throw new Error("Evidence preparation failed: zero digest");let h=String(s||"").trim();h.endsWith("/")&&(h=h.slice(0,-1)),h.toLowerCase().endsWith("/submit-evidence")||(h=h+"/submit-evidence");let u;try{u=await fetch(h,{method:"POST",headers:{"Content-Type":"application/json"},body:c})}catch(g){throw g}if(!u.ok){let g=null;try{g=await u.json()}catch{g=null}if(u.status===400&&g&&g.adminPublicKey){const j=g.adminPublicKey,{ciphertext:b,digest:y}=await sa(t,{encryptToAdminPubKey:j});if(u=await fetch(h,{method:"POST",headers:{"Content-Type":"application/json"},body:b}),!u.ok){const S=await u.text().catch(()=>"");throw new Error("evidence endpoint retry failed: "+u.status+" "+S)}const C=await u.json();return C&&C.digest?C.digest:y}const x=await(async()=>{try{return await u.text()}catch{return""}})();throw new Error("evidence endpoint returned "+u.status+" "+x)}const m=await u.json(),w=m&&m.ipfsUri?m.ipfsUri:null,f=m&&m.digest?m.digest:d;return w||f}catch(t){throw t}}async getCodeSafe(a){const t=this.signer.provider,s=3;for(let n=1;n<=s;n++)try{const i=await t.getCode(a);if((Number(this.chainId)===31337||Number(this.chainId)===1337||Number(this.chainId)===5777)&&i==="0x")try{const r=await new at("http://127.0.0.1:8545").getCode(a);if(r&&r!=="0x")return r}catch(d){console.warn("Local RPC fallback getCode failed",d)}return i}catch(i){const c=String(i?.message||"");if(/network changed/i.test(c)&&n<s){const h=100*Math.pow(2,n-1);console.warn(`Transient network change detected while reading code for ${a}, retrying in ${h}ms (${n}/${s})`),await new Promise(u=>setTimeout(u,h));continue}const d=!!i?.data?.cause?.isBrokenCircuitError||/circuit breaker/i.test(c);if((Number(this.chainId)===31337||Number(this.chainId)===1337||Number(this.chainId)===5777)&&(/invalid block tag/i.test(c)||/Internal JSON-RPC error/i.test(c)||d)){console.warn("Provider.getCode failed on injected provider; falling back to http://127.0.0.1:8545",{error:i});try{return await new at("http://127.0.0.1:8545").getCode(a)}catch(h){console.warn("Fallback JSON-RPC getCode failed",{rpcErr:h})}}throw i}}async getFactoryContract(){const a=await ta(this.chainId,"factory");if(!a)throw new Error("Factory contract not deployed on this network");const t=await le("ContractFactory",a,this.signer),s=await this.getCodeSafe(a);if(!s||s==="0x")throw new Error(`No contract code at ${a}. Is the node running and deployed and is your wallet connected to the same network?`);return t}async createRentContract(a){try{if(!a.tenant.trim().match(/^0x[a-fA-F0-9]{40}$/))throw new Error("Tenant address must be a valid Ethereum address");if(!a.priceFeed.trim().match(/^0x[a-fA-F0-9]{40}$/))throw new Error("PriceFeed address must be a valid Ethereum address");const t=await this.getFactoryContract();let s;try{s=await this.signer.provider.getNetwork()}catch(r){throw console.warn("Could not determine provider network:",r),new Error("Could not determine connected wallet network. Ensure your wallet is connected and try again.")}if(Number(s.chainId)!==Number(this.chainId))throw new Error(`Connected wallet network mismatch: provider chainId=${s.chainId} but expected=${this.chainId}. Please switch your wallet to the correct network.`);try{let r=null;if(this.signer&&typeof this.signer.getBalance=="function")r=await this.signer.getBalance();else try{const u=await this.signer.getAddress().catch(()=>null);u&&this.signer.provider&&typeof this.signer.provider.getBalance=="function"&&(r=await this.signer.provider.getBalance(u))}catch{}const h=_e("0.0001");if(r!==null&&r<h)throw new Error("Connected wallet has insufficient ETH balance to create a contract. Fund the wallet and try again.")}catch(r){console.warn("Could not determine signer balance:",r)}const n=_e(a.rentAmount);try{const r=await this.getCodeSafe(a.priceFeed);if(!r||r==="0x"){const h=Number(this.chainId);throw new Error(`Selected price feed has no contract code on chain ${h}. If you're on localhost, choose "Mock Price Feed (Local)".`)}}catch(r){throw r}try{const r=await this.signer.getAddress().catch(()=>null),h=t.target||t.address||null;console.debug("Preparing factory.createRentContract",{factoryAddr:h,signerAddr:r,expectedChainId:this.chainId});try{if(typeof window<"u"&&window.ethereum&&window.ethereum.request){const u=await window.ethereum.request({method:"eth_accounts"}).catch(()=>[]),m=await window.ethereum.request({method:"eth_chainId"}).catch(()=>null);console.debug("Injected wallet state before send",{ethAccounts:u,ethChainId:m});const w=u&&u[0]||null;if(w&&r&&w.toLowerCase()!==r.toLowerCase())throw new Error(`Wallet selected account (${w}) does not match the connected signer (${r}). Please select the correct account in your wallet and try again.`);if(m)try{const f=`0x${Number(this.chainId).toString(16)}`;if(m!==f)throw new Error(`Wallet network mismatch: wallet chainId=${m} but expected=${f}. Please switch your wallet to the correct network and try again.`)}catch(f){throw f}}}catch(u){throw console.error("Wallet preflight check failed:",u),u}}catch{}let i;try{let r=0;try{const m=Number(a.startDate||0),w=Number(a.duration||0);m>0&&w>0&&(r=Math.floor(m+w*24*3600))}catch{r=0}const h=Number(a.propertyId||0);console.debug("Sending createRentContract with",{tenant:a.tenant,rentAmountWei:n.toString(),priceFeed:a.priceFeed,dueDate:r,propertyId:h,factory:t.target||t.address});let u=null;if(a.initialEvidenceDigest){const m=String(a.initialEvidenceDigest);/^0x[0-9a-fA-F]{64}$/.test(m)?u=m:u=na(m)}u?i=await t["createRentContract(address,uint256,address,uint256,uint256,string)"](a.tenant,n,a.priceFeed,r,h,u):i=await t["createRentContract(address,uint256,address,uint256,uint256)"](a.tenant,n,a.priceFeed,r,h)}catch(r){try{console.error("Factory createRentContract failed:",r),r?.payload&&console.error("Underlying RPC payload:",r.payload),r?.error&&console.error("Provider error object:",r.error)}catch{}throw new Error("Failed to send transaction to the factory. Verify your wallet is connected to the expected network (localhost if using Hardhat), the selected account is unlocked/has ETH, and the frontend deployment addresses match the network. See console for raw RPC payload.")}const c=await i.wait();let d=null;for(const r of c.logs)try{const h=t.interface.parseLog(r);if(h&&h.name==="RentContractCreated"){d=h.args[0];break}}catch{continue}return{receipt:c,contractAddress:d,success:!!d}}catch(t){throw console.error("Error creating rent contract:",t),t?.code==="CALL_EXCEPTION"&&/no contract code|missing revert data/i.test(String(t?.message||""))?new Error("Factory call failed. Verify you are on the correct network and that the Price Feed address is deployed on this network."):t}}async getRentContract(a){try{return!a||typeof a!="string"||!/^0x[0-9a-fA-F]{40}$/.test(a)?(console.warn("getRentContract called with invalid contractAddress:",a),null):await le("TemplateRentContract",a,this.signer)}catch(t){throw console.error("Error getting rent contract:",t),t}}async getWithdrawable(a,t){try{const n=await(await this.getRentContract(a)).withdrawable(t);return BigInt(n||0)}catch{try{const n=await le("TemplateRentContract",a,this.signer),i=n.interface.encodeFunctionData("withdrawable",[t]),c=await this.signer.provider.call({to:a,data:i}),d=n.interface.decodeFunctionResult("withdrawable",c);return BigInt(d[0]||0)}catch(n){return console.warn("Could not read withdrawable for",t,n),0n}}}async getDisputeBond(a,t){try{const n=await(await this.getRentContract(a)).getDisputeBond(t);return BigInt(n||0)}catch{try{const n=await le("TemplateRentContract",a,this.signer),i=n.interface.encodeFunctionData("getDisputeBond",[t]),c=await this.signer.provider.call({to:a,data:i}),d=n.interface.decodeFunctionResult("getDisputeBond",c);return BigInt(d[0]||0)}catch(n){return console.warn("Could not read dispute bond for",a,t,n),0n}}}async withdrawRentPayments(a){try{return await(await(await this.getRentContract(a)).withdrawPayments()).wait()}catch(t){throw console.error("Error withdrawing rent payments:",t),t}}async getWithdrawable(a,t){try{const n=await(await this.getRentContract(a)).withdrawable(t);return BigInt(n||0n)}catch(s){return console.debug("getWithdrawable not available or failed",s),0n}}async getDisputeBond(a,t){try{const s=await this.getRentContract(a),n=["getDisputeBond","disputeBond","reporterBond","bondOf","caseReporterBond"];for(const i of n)try{if(typeof s[i]=="function"){const c=await s[i](t);return BigInt(c||0n)}}catch{}return 0n}catch(s){return console.debug("getDisputeBond failed",s),0n}}async getDisputeMeta(a,t){try{const n=await(await this.getRentContract(a)).getDisputeMeta(Number(t));return{classification:n[0]||"",rationale:n[1]||""}}catch{try{const n=await le("TemplateRentContract",a,this.signer),i=n.interface.encodeFunctionData("getDisputeMeta",[Number(t)]),c=await this.signer.provider.call({to:a,data:i}),d=n.interface.decodeFunctionResult("getDisputeMeta",c);return{classification:d[0]||"",rationale:d[1]||""}}catch(n){return console.debug("getDisputeMeta failed",n),null}}}async getRentContractDetails(a,t={}){const{silent:s=!1}=t||{};try{const n=await this.signer.provider.getCode(a);if(!n||n==="0x")throw new Error(`Address ${a} has no contract code`);const i=await this.getRentContract(a);if(typeof i.rentAmount!="function"||typeof i.landlord!="function"||typeof i.tenant!="function")return s||console.debug("getRentContractDetails: contract ABI mismatch, not a Rent contract",a),null;const[c,d,r,h,u]=await Promise.all([i.landlord().catch(()=>null),i.tenant().catch(()=>null),i.rentAmount().catch(()=>0n),typeof i.priceFeed=="function"?i.priceFeed().catch(()=>null):Promise.resolve(null),typeof i.active=="function"?i.active().catch(()=>!0):Promise.resolve(!0)]),m=ee=>typeof ee=="string"&&/^0x[0-9a-fA-F]{40}$/.test(ee);if(!m(c)||!m(d))return s||console.debug("getRentContractDetails: landlord/tenant not valid addresses, treating as not a Rent contract",{landlord:c,tenant:d,contractAddress:a}),null;const[w,f,g,x,j,b]=await Promise.all([i.requireMutualCancel?.().catch(()=>!1)??!1,i.noticePeriod?.().catch(()=>0n)??0n,i.earlyTerminationFeeBps?.().catch(()=>0)??0,i.cancelRequested?.().catch(()=>!1)??!1,i.cancelInitiator?.().catch(()=>"0x0000000000000000000000000000000000000000")??"0x0000000000000000000000000000000000000000",i.cancelEffectiveAt?.().catch(()=>0n)??0n]),[y,C]=await Promise.all([i.cancelApprovals?.(c).catch(()=>!1)??!1,i.cancelApprovals?.(d).catch(()=>!1)??!1]);let S=!1,A=!1,I=!1,D=0n;try{D=await i.dueDate();const[ee,G,X]=await Promise.all([i.signedBy?.(c).catch(()=>!1),i.signedBy?.(d).catch(()=>!1),i.isFullySigned?.().catch(()=>i.rentSigned?.().catch(()=>!1))]);S=!!ee,A=!!G,I=!!X}catch{}const T=ne(r);let H="Active";return u?x&&(H="Pending"):H="Cancelled",{type:"Rental",address:a,landlord:c,tenant:d,rentAmount:T,priceFeed:h,isActive:!!u,cancellation:{requireMutualCancel:!!w,noticePeriod:Number(f||0n),earlyTerminationFeeBps:Number(g||0),cancelRequested:!!x,cancelInitiator:j,cancelEffectiveAt:Number(b||0n),approvals:{landlord:!!y,tenant:!!C}},signatures:{landlord:S,tenant:A,fullySigned:I,dueDate:Number(D||0n)},amount:T,parties:[c,d],status:H,created:"—"}}catch(n){return s||console.error("Error getting contract details:",n),null}}async getUserContracts(a){try{const s=await(await this.getFactoryContract()).getContractsByCreator(a);return(await Promise.all(s.map(async i=>{try{const c=await this.signer.provider.getCode(i);return c&&c!=="0x"?i:null}catch{return null}}))).filter(Boolean)}catch(t){return console.error("Error fetching user contracts:",t),[]}}async getContractsByParticipant(a,t=50,s=300){try{const n=await this.getFactoryContract(),i=Number(await n.getAllContractsCount()),c=Math.min(i,s),d=Math.ceil(c/t)||0,r=new Set;for(let h=0;h<d;h++){const u=h*t,m=Math.min(t,c-u);if(m<=0)break;const w=await n.getAllContractsPaged(u,m);for(const f of w)try{const g=await this.signer.provider.getCode(f);if(!g||g==="0x")continue;try{const x=await this.getRentContract(f),[j,b]=await Promise.all([x.landlord(),x.tenant()]);if(j?.toLowerCase()===a.toLowerCase()||b?.toLowerCase()===a.toLowerCase()){r.add(f);continue}}catch{}try{const x=await this.getNDAContract(f),[j,b]=await Promise.all([x.partyA(),x.partyB()]);(j?.toLowerCase()===a.toLowerCase()||b?.toLowerCase()===a.toLowerCase())&&r.add(f)}catch{}}catch{}}return Array.from(r)}catch(n){return console.error("Error discovering participant contracts:",n),[]}}async payRent(a,t){try{const s=await this.getRentContract(a);try{const[c,d]=await Promise.all([s.tenant(),this.signer.getAddress()]);if(c?.toLowerCase?.()!==d?.toLowerCase?.()){const r=`Connected wallet is not the tenant. Expected ${c}, got ${d}`,h=new Error(r);throw h.reason=r,h}}catch(c){throw c?.reason?c:new Error("Could not verify tenant address on-chain. Check network and contract address.")}try{if(!await s.rentSigned()){const d=new Error("Both parties must sign before payment");throw d.reason="Both parties must sign before payment",d}}catch(c){if(c?.reason)throw c}return await(await s.payRentInEth({value:_e(t)})).wait()}catch(s){try{const n=s?.data||s?.error?.data;if(n&&typeof n=="object"&&n.data){const i=n.data;if(i&&i.startsWith("0x")){const c=i.slice(2,10),d={ac37e5cb:"Both parties must sign before payment","873cf48b":"Only tenant may call this","80cb55e2":"Contract inactive","1fbaba35":"Amount too low","00bfc921":"Invalid price"},r={"08c379a0":"finalize failed"};if(d[c]){const h=new Error(d[c]);throw h.reason=d[c],h}if(r[c]){const h=new Error(r[c]);throw h.reason=r[c],h}}}else if(s?.data&&typeof s.data=="string"&&s.data.startsWith("0x")){const i=s.data.slice(2,10),c={ac37e5cb:"Both parties must sign before payment","873cf48b":"Only tenant may call this","80cb55e2":"Contract inactive","1fbaba35":"Amount too low","00bfc921":"Invalid price"};if(c[i]){const d=new Error(c[i]);throw d.reason=c[i],d}}}catch(n){throw console.error("Mapped rent payment error:",n?.reason||n?.message),n}throw console.error("Error paying rent:",s),s}}async finalizeCancellationViaService(a,t,s=0n){try{if(!a||!a.trim())throw new Error("Arbitration service address required");try{const r=await le("TemplateRentContract",t,this.signer),h=await r.arbitrationService().catch(()=>null);if(!h||h==="0x0000000000000000000000000000000000000000")throw new Error(`Target contract ${t} has no arbitrationService configured`);if(h&&h.toLowerCase()!==a.toLowerCase())throw new Error(`Target arbitrationService mismatch: contract=${h} but you supplied ${a}`);if(!await r.cancelRequested().catch(()=>!1))throw new Error("Target contract has no pending cancellation (cancelRequested=false)");const m=Number(await r.earlyTerminationFeeBps().catch(()=>0));if(m>0){let w=0n;try{w=BigInt(await r.getRentInEth())}catch{throw new Error("Target requires an early termination fee but rent-in-ETH could not be determined (price feed may be missing)")}const f=w*BigInt(m)/10000n;if(f>0n&&(typeof s=="bigint"?s:BigInt(s||0))<f)throw new Error(`Target requires early termination fee of ${f} wei; pass this amount as feeWei to finalizeCancellationViaService`)}}catch(r){throw console.error("Arbitration preflight failed:",r),r}let n;try{n=await le("ArbitrationService",a,this.signer)}catch(r){throw console.error("Could not create ArbitrationService instance via static ABI helper:",r),new Error("ArbitrationService ABI not available")}const i=typeof s=="bigint"?s:BigInt(s||0);return await(await n.finalizeTargetCancellation(t,{value:i})).wait()}catch(n){throw console.error("Error finalizing via arbitration service:",n),n}}async finalizeByLandlordViaService(a,t,s=0n){try{if(!a||!a.trim())throw new Error("Arbitration service address required");const n=await le("TemplateRentContract",t,this.signer),i=await n.arbitrationService().catch(()=>null);if(!i||i==="0x0000000000000000000000000000000000000000")throw new Error(`Target contract ${t} has no arbitrationService configured`);if(i&&i.toLowerCase()!==a.toLowerCase())throw new Error(`Target arbitrationService mismatch: contract=${i} but you supplied ${a}`);if(!await n.cancelRequested().catch(()=>!1))throw new Error("Target contract has no pending cancellation (cancelRequested=false)");const d=Number(await n.earlyTerminationFeeBps().catch(()=>0));if(d>0){let g=0n;try{g=BigInt(await n.getRentInEth())}catch{throw new Error("Target requires an early termination fee but rent-in-ETH could not be determined (price feed may be missing)")}const x=g*BigInt(d)/10000n;if(x>0n&&(typeof s=="bigint"?s:BigInt(s||0))<x)throw new Error(`Target requires early termination fee of ${x} wei; pass this amount as feeWei to finalizeByLandlordViaService`)}const r=(await this.signer.getAddress()).toLowerCase(),h=(await n.landlord()).toLowerCase(),u=typeof s=="bigint"?s:BigInt(s||0);let m;try{m=await le("ArbitrationService",a,this.signer)}catch(g){throw console.error("Could not create ArbitrationService instance via static ABI helper:",g),new Error("ArbitrationService ABI not available")}return r===h?await(await m.finalizeByLandlord(t,{value:u})).wait():await(await m.finalizeTargetCancellation(t,{value:u})).wait()}catch(n){throw console.error("Error finalizing via arbitration service (landlord path):",n),n}}async applyResolutionToTargetViaService(a,t,s,n,i=0n,c=be,d=0n){try{if(!a)throw new Error("Arbitration service address required");const r=Number(typeof s=="number"||typeof s=="string"?s:s||0);let h=typeof i=="bigint"?i:BigInt(i||0),u;try{u=await le("ArbitrationService",a,this.signer)}catch(m){throw console.error("Could not create ArbitrationService instance via static ABI helper:",m),new Error("ArbitrationService ABI not available")}try{const m=(await this.signer.getAddress()).toLowerCase(),w=await u.owner?.().catch(()=>null)||null,f=await u.factory?.().catch(()=>null)||null,g=w&&m===String(w).toLowerCase(),x=f&&m===String(f).toLowerCase();if(!g&&!x)throw new Error("Connected wallet is not authorized to call ArbitrationService (must be service owner or factory). Switch to the arbitrator account.")}catch(m){throw console.error("Authorization preflight failed for applyResolutionToTargetViaService:",m),m}try{const m=await le("TemplateRentContract",t,this.signer),w=await m.arbitrationService().catch(()=>null);if(!w||w===be)throw new Error(`Target contract ${t} has no arbitrationService configured`);if(String(w).toLowerCase()!==String(a).toLowerCase())throw new Error(`Target arbitrationService mismatch: contract=${w} but you supplied ${a}`);try{const f=await m.landlord().catch(()=>null),g=await m.tenant().catch(()=>null),x=String(c||"").toLowerCase();let j=null;if(x&&f&&x===String(f).toLowerCase()?j=g:j=f,j){const b=BigInt(await m.partyDeposit(j).catch(()=>0n)||0n);b<h&&(console.warn(`Clamping appliedAmount ${h} to debtor deposit ${b} to avoid revert`),h=b)}}catch(f){console.debug("Could not compute debtor deposit for clamping:",f)}}catch(m){throw console.error("Target preflight failed for applyResolutionToTargetViaService:",m),m}try{const m=d&&typeof d=="bigint"&&d>0n?{value:d}:{};return await(await u.applyResolutionToTarget(t,r,!!n,h,c,m)).wait()}catch(m){try{const w=m?.error?.message||m?.message||String(m);throw new Error(`ArbitrationService call failed: ${w}`)}catch{throw m}}}catch(r){throw console.error("Error applying resolution via ArbitrationService:",r),r}}computeReporterBond(a){try{const t=typeof a=="bigint"?a:BigInt(a||0);if(t<=0n)return 0n;let s=t*5n/1000n;return s===0n&&(s=1n),s}catch{return 0n}}async reportRentDispute(a,t=0,s=0n,n="",i={}){try{if(!a)throw console.error("reportRentDispute called with empty contractAddress",{contractAddress:a}),new Error("contractAddress is required for reportRentDispute");if(!/^0x[0-9a-fA-F]{40}$/.test(String(a)))throw console.error("reportRentDispute called with invalid contractAddress",{contractAddress:a}),new Error("Invalid contractAddress for reportRentDispute");console.debug("reportRentDispute target:",a);let c;try{c=await le("TemplateRentContract",a,this.signer)}catch(f){throw console.error("Failed to create TemplateRentContract instance for",a,f),f}try{const[f,g,x]=await Promise.all([c.landlord().catch(()=>null),c.tenant().catch(()=>null),this.signer.getAddress().catch(()=>null)]),j=(f||"").toLowerCase(),b=(g||"").toLowerCase(),y=(x||"").toLowerCase();if(y!==j&&y!==b){const C=new Error(`Connected wallet (${y}) is not a party to contract ${a}`);throw C.code="NOT_A_PARTY",C}}catch(f){throw f}const d=typeof s=="bigint"?s:BigInt(s||0),r=n&&String(n).trim().length>0?String(n).trim():"",h=this.computeReporterBond(d),u=h>0n?{value:h}:{};let m="";const w=Ot&&"http://127.0.0.1:5001/submit-evidence"||window&&window?.__ENV__&&window.__ENV__.VITE_EVIDENCE_SUBMIT_ENDPOINT||null;if(r&&/^0x[0-9a-fA-F]{64}$/.test(r))m=r;else if(r)if(w)try{const{prepareEvidencePayload:f}=await We(async()=>{const{prepareEvidencePayload:C}=await Promise.resolve().then(()=>Ft);return{prepareEvidencePayload:C}},void 0),g=Ot&&"8318535b54105d4a7aae60c08fc45f9687181b4fdfc625bd1a753fa7397fed753547f11ca8696646f2f3acb08e31016afac23e630c5d11f59f61fef57b0d2aa5"||window&&window?.__ENV__&&window.__ENV__.VITE_ADMIN_PUBLIC_KEY||null,{ciphertext:x,digest:j}=await f(r,{encryptToAdminPubKey:g});let y=await fetch(w,{method:"POST",headers:{"content-type":"application/json"},body:x||r});if(y&&!y.ok){let C=null;try{C=await y.json()}catch{C=null}if(y.status===400&&C&&C.adminPublicKey){try{i&&typeof i.onRetry=="function"&&i.onRetry({status:"retrying",reason:"server_requested_reencrypt"})}catch{}const S=C.adminPublicKey;try{const{ciphertext:A,digest:I}=await f(r,{encryptToAdminPubKey:S});if(y=await fetch(w,{method:"POST",headers:{"content-type":"application/json"},body:A}),y&&y.ok){try{i&&typeof i.onRetry=="function"&&i.onRetry({status:"ok"})}catch{}const D=await y.json();D&&D.ipfsUri?m=String(D.ipfsUri):D&&D.digest?m=String(D.digest):D&&D.digestNo0x?m="0x"+String(D.digestNo0x):m=I||j||Be(He(r))}else{try{i&&typeof i.onRetry=="function"&&i.onRetry({status:"failed"})}catch{}m=I||j||Be(He(r))}}catch(A){console.warn("Retry encryption/post failed:",A);try{i&&typeof i.onRetry=="function"&&i.onRetry({status:"failed"})}catch{}m=j||Be(He(r))}}else m=j||Be(He(r))}else if(y&&y.ok){const C=await y.json();C&&C.ipfsUri?m=String(C.ipfsUri):C&&C.digest?m=String(C.digest):C&&C.digestNo0x?m="0x"+String(C.digestNo0x):m=j}}catch(f){console.warn("Evidence submit endpoint flow failed, using local digest",f),m=Be(He(r))}else m=Be(He(r));try{const f=await this.signer.getAddress().catch(()=>null);console.debug("reportRentDispute: signerAddr=",f,"target=",a,"disputeType=",t,"amount=",String(d),"evidence=",m);try{const b=await this.getCodeSafe(a);console.debug("reportRentDispute: target contract code length=",b&&b.length)}catch(b){console.warn("reportRentDispute: could not fetch target code",b)}let g=null;try{g=c.interface.encodeFunctionData("reportDispute",[t,d,m]),console.debug("reportRentDispute: calldata=",g.slice(0,10)+"...")}catch(b){console.warn("reportRentDispute: failed to encode calldata",b)}const j=await(await c.reportDispute(t,d,m,u)).wait();return{receipt:j,caseId:(function(){try{for(const b of j.logs)try{const y=c.interface.parseLog(b);if(y&&y.name==="DisputeReported")return y.args[0]?.toString?.()??null}catch{}}catch{}return null})()}}catch(f){console.error("reportRentDispute: send failed",f);try{if(calldata&&this.signer&&this.signer.provider){const g=await this.signer.getAddress().catch(()=>null)||void 0,x={to:a,data:calldata,from:g};try{const j=await this.signer.provider.call(x);console.debug("reportRentDispute: provider.call returned",j)}catch(j){console.warn("reportRentDispute: provider.call failed",j?.data||j?.message||j)}}}catch(g){console.warn("reportRentDispute: low-level probe failed",g)}throw f}}catch(c){throw console.error("Error reporting rent dispute:",c),c}}async depositForCase(a,t,s=0n){try{if(!a)throw new Error("contractAddress required");const n=await this.getRentContract(a),i=typeof s=="bigint"?s:BigInt(s||0);if(i<=0n)throw new Error("deposit amount must be > 0");return await(await n.depositForCase(Number(t),{value:i})).wait()}catch(n){throw console.error("Error depositing for case:",n),n}}async isAuthorizedArbitratorForContract(a){try{const t=(await this.signer.getAddress()).toLowerCase();try{const n=await(await this.getFactoryContract()).getCreatorOf(a).catch(()=>be);if(n&&n!==be&&n.toLowerCase()===t)return!0}catch{}try{try{const n=await(await this.getRentContract(a)).arbitrationService();if(n&&n!==be){const c=await(await le("ArbitrationService",n,this.signer)).owner().catch(()=>be);if(c&&c.toLowerCase()===t)return!0}}catch{}try{const n=await(await this.getNDAContract(a)).arbitrationService();if(n&&n!==be){const c=await(await le("ArbitrationService",n,this.signer)).owner().catch(()=>be);if(c&&c.toLowerCase()===t)return!0}}catch{}}catch{}return!1}catch(t){return console.error("Error checking arbitrator authorization:",t),!1}}async setCancellationPolicy(a,{noticePeriodSec:t,feeBps:s,requireMutual:n}){try{return await(await(await this.getRentContract(a)).setCancellationPolicy(Number(t||0),Number(s||0),!!n)).wait()}catch(i){throw console.error("Error setting cancellation policy:",i),i}}async initiateCancellation(a){try{const t=await this.getRentContract(a);try{const[i,c,d,r]=await Promise.all([t.landlord().catch(()=>null),t.tenant().catch(()=>null),t.active().catch(()=>null),t.cancelRequested().catch(()=>null)]),h=await this.signer.getAddress().catch(()=>null);if(!h)throw new Error("Could not determine connected wallet address. Connect your wallet and try again.");const u=g=>g?String(g).toLowerCase():null,m=u(h),w=u(i),f=u(c);if(d===!1||String(d)==="false")throw new Error("Contract is not active. Cancellation not allowed.");if(r===!0||String(r)==="true")throw new Error("Cancellation has already been requested for this contract.");if(m!==w&&m!==f)throw new Error("Only the landlord or tenant may initiate cancellation. Switch to the correct account and try again.")}catch(i){if(i&&i.message)throw i}try{if(t&&t.estimateGas&&typeof t.estimateGas.initiateCancellation=="function")try{await t.estimateGas.initiateCancellation()}catch(i){const c=i?.data||i?.error?.data||i?.reason||null,d=typeof c=="string"&&c.startsWith("0x")?c:c&&c.data&&typeof c.data=="string"?c.data:null;if(d){const r=d.slice(2,10),h={a9b7d5d7:"Only the landlord or tenant may initiate cancellation","00bfc921":"Invalid price or oracle failure",c76a4f7e:"Cancellation already requested"};if(h[r])throw new Error(h[r])}throw i}}catch(i){if(i&&i.message)throw i}let s=this.signer;try{if(typeof window<"u"&&window.ethereum&&window.ethereum.request){let i=[];for(let r=0;r<5;r++){try{i=await window.ethereum.request({method:"eth_accounts"}).catch(()=>[])}catch{i=[]}if(i&&i[0])break;await new Promise(h=>setTimeout(h,200))}const d=i&&i[0]?String(i[0]).toLowerCase():null;try{const r=(await this.signer.getAddress().catch(()=>null)||"").toLowerCase();if(d&&d!==r)try{const u=(this.signer.provider||new dt(window.ethereum)).getSigner(i[0]),m=(await u.getAddress().catch(()=>null)||"").toLowerCase();m&&m===d&&(s=u)}catch{}}catch{}}}catch{}let n;try{return n=await t.connect(s).initiateCancellation(),await n.wait()}catch(i){try{const c=i?.data||i?.error?.data||i?.data?.data||null,d=typeof c=="string"&&c.startsWith("0x")?c:c&&c.data&&typeof c.data=="string"?c.data:null;if(d){const r=d.slice(2,10),h={"2f54bf6e":"Only tenant may call this",d3d3d3d3:"Only landlord may call this",b7f9c7a1:"Contract is not active",c1e3d4b2:"Cancellation already requested",86753090:"Not a party to this contract"};if(h[r])throw new Error(h[r])}}catch{}throw i}}catch(t){throw console.error("Error initiating cancellation:",t),t}}async approveCancellation(a){try{return await(await(await this.getRentContract(a)).approveCancellation()).wait()}catch(t){throw console.error("Error approving cancellation:",t),t}}async finalizeCancellation(a,{feeValueEth:t}={}){try{const s=await this.getRentContract(a),n={};return t&&Number(t)>0&&(n.value=_e(String(t))),await(await s.finalizeCancellation(n)).wait()}catch(s){throw console.error("Error finalizing cancellation:",s),s}}async createNDA(a){try{const t=await this.getFactoryContract(),s=Math.floor(new Date(a.expiryDate).getTime()/1e3),n=_e(a.minDeposit),i=a.arbitrator||be,c=a.customClauses?cn(a.customClauses):st,r=await(await t.createNDA(a.partyB,s,a.penaltyBps,c,n)).wait();let h=null;for(const u of r.logs)try{const m=t.interface.parseLog(u);if(m&&m.name==="NDACreated"){h=m.args[0];break}}catch{continue}return{receipt:r,contractAddress:h,success:!!h}}catch(t){throw console.error("Error creating NDA:",t),t}}async getNDAContract(a){try{return!a||typeof a!="string"||!/^0x[0-9a-fA-F]{40}$/.test(a)?(console.warn("getNDAContract called with invalid contractAddress:",a),null):await le("NDATemplate",a,this.signer)}catch(t){throw console.error("Error getting NDA contract:",t),t}}async getNDAContractDetails(a,t={}){const{silent:s=!1}=t||{};try{const n=await this.signer.provider.getCode(a);if(!n||n==="0x")throw new Error(`Address ${a} has no contract code`);const i=await this.getNDAContract(a),[c,d,r,h,u,m,w,f,g]=await Promise.all([i.partyA(),i.partyB(),i.expiryDate(),i.penaltyBps(),i.minDeposit(),i.active().catch(()=>!0),i.arbitrator?.().catch?.(()=>be)??be,i.admin?.().catch?.(()=>be)??be,i.canWithdraw?.().catch?.(()=>!1)??!1]);let x=!1,j="0",b=0;try{const D=await i.getContractStatus();x=!!D[1];const T=D&&typeof D[2]<"u"&&D[2]!==null?D[2]:0n;try{j=ne(T)}catch{j="0"}b=Number(D[3]||0)}catch{}let y=[];try{y=await i.getParties()}catch{y=[c,d].filter(Boolean)}const C={},S={};for(const D of y){try{C[D]=await i.signedBy(D)}catch{C[D]=!1}try{const T=await i.deposits(D);S[D]=ne(T)}catch{S[D]="0"}}let A=[];try{const D=Number(await i.getCasesCount()),T=[];for(let H=0;H<D;H++)try{const ee=await i.getCase(H);T.push({id:H,reporter:ee[0],offender:ee[1],requestedPenalty:ne(ee[2]??0n),evidence:ee[3],resolved:!!ee[4],approved:!!ee[5],approveVotes:Number(ee[6]||0),rejectVotes:Number(ee[7]||0)})}catch{}A=T}catch{}const I=ne(u);return{address:a,partyA:c,partyB:d,expiryDate:new Date(Number(r)*1e3).toLocaleDateString(),penaltyBps:Number(h),minDeposit:I,isActive:!!m,arbitrator:w,admin:f,fullySigned:x,totalDeposits:j,activeCases:b,canWithdraw:!!g,parties:y,signatures:C,depositsByParty:S,cases:A,type:"NDA",amount:I,parties:[c,d],status:m?"Active":"Inactive",created:new Date(Number(r)*1e3).toLocaleDateString()}}catch(n){return s||console.error("Error getting NDA details:",n),null}}async signNDA(a){try{const t=await this.getNDAContract(a),s=(await this.signer.getAddress()).toLowerCase();try{const[w,f]=await Promise.all([t.isParty(s),t.signedBy(s)]);if(!w)throw new Error("Current wallet is not a party to this NDA");if(f)throw new Error("Already signed with this wallet")}catch{}const[n,i,c]=await Promise.all([t.expiryDate(),t.penaltyBps(),t.customClausesHash()]),d={name:"NDATemplate",version:"1",chainId:Number(this.chainId),verifyingContract:a},r={NDA:[{name:"contractAddress",type:"address"},{name:"expiryDate",type:"uint256"},{name:"penaltyBps",type:"uint16"},{name:"customClausesHash",type:"bytes32"}]},h={contractAddress:a,expiryDate:BigInt(n),penaltyBps:Number(i),customClausesHash:c},u=await this.signer.signTypedData(d,r,h);return await(await t.signNDA(u)).wait()}catch(t){console.error("Error signing NDA:",t);const s=t?.reason||t?.error?.message||t?.data?.message||t?.message||"";throw/already signed/i.test(s)?new Error("Already signed with this wallet"):t}}async ndaDeposit(a,t){try{return await(await(await this.getNDAContract(a)).deposit({value:_e(String(t))})).wait()}catch(s){throw console.error("Error depositing to NDA:",s),s}}async ndaWithdraw(a,t){try{return await(await(await this.getNDAContract(a)).withdrawDeposit(_e(String(t)))).wait()}catch(s){throw console.error("Error withdrawing from NDA:",s),s}}async ndaReportBreach(a,t,s,n){try{const i=await this.getNDAContract(a),c=s?_e(String(s)):0n,d=n&&String(n).trim().length>0?String(n).trim():"",r=d&&/^0x[0-9a-fA-F]{64}$/.test(d)?d:d?Be(He(d)):st;let h=0n;try{h=await i.disputeFee()}catch{h=0n}try{return await(await i.reportBreach(t,c,r,{value:h})).wait()}catch(u){try{const w=i.interface.encodeFunctionData("reportBreach",[t,c,r]),f=this.signer?await this.signer.getAddress():void 0,g=this.signer&&this.signer.provider?this.signer.provider:this.provider||null;if(g&&typeof g.call=="function")try{const x=await g.call({to:a,data:w,from:f,value:h});console.warn("Low-level provider.call returned (no revert):",x)}catch(x){console.error("Low-level provider.call error while probing revert:",x);try{u.probe={callError:x&&(x.message||x.reason||x.data)}}catch{}}}catch(m){console.error("Failed to probe revert with provider.call:",m)}throw u}}catch(i){throw console.error("Error reporting breach:",i),i}}async ndaVoteOnBreach(a,t,s){throw new Error("Voting disabled: use arbitrator or oracle resolution")}async ndaResolveByArbitrator(a,t,s,n){throw new Error("resolveByArbitrator removed: use platform arbitrator + ArbitrationService flow")}async ndaEnforcePenalty(a,t,s,n){try{const i=await this.getNDAContract(a),c=_e(String(s));return await(await i.enforcePenalty(t,c,n)).wait()}catch(i){throw console.error("Error enforcing penalty:",i),i}}async ndaDeactivate(a,t){try{return await(await(await this.getNDAContract(a)).deactivate(t||"")).wait()}catch(s){throw console.error("Error deactivating NDA:",s),s}}async signRent(a){try{const t=await this.getRentContract(a),s=(await this.signer.getAddress()).toLowerCase(),n=(await t.landlord()).toLowerCase(),i=(await t.tenant()).toLowerCase();if(s!==n&&s!==i)throw new Error("Current wallet is not a party to this Rent contract");try{if(await t.signedBy(s))throw new Error("Already signed with this wallet")}catch{}const c=await t.dueDate(),d=await t.rentAmount(),r={name:"TemplateRentContract",version:"1",chainId:Number(this.chainId),verifyingContract:a},h={RENT:[{name:"contractAddress",type:"address"},{name:"landlord",type:"address"},{name:"tenant",type:"address"},{name:"rentAmount",type:"uint256"},{name:"dueDate",type:"uint256"}]},u={contractAddress:a,landlord:n,tenant:i,rentAmount:BigInt(d),dueDate:BigInt(c)},m=await this.signer.signTypedData(r,h,u);return await(await t.signRent(m)).wait()}catch(t){console.error("Error signing Rent contract:",t);const s=t?.reason||t?.message||"";throw/already signed/i.test(s)?new Error("Already signed with this wallet"):t}}}class xa{constructor(a,t){this.signer=a,this.chainId=t}async getArbitratorForNDA(a){const s=await(await le("NDATemplate",a,this.signer)).arbitrationService();if(!s||s===be)throw new Error("This NDA has no arbitrationService configured");return await le("ArbitrationService",s,this.signer)}async getArbitratorOwner(a){const t=await this.getArbitratorForNDA(a);try{return await t.owner()}catch{return be}}async getArbitrationServiceOwnerByNDA(a){const t=await this.getArbitratorForNDA(a);try{return await t.owner()}catch{return be}}async createDisputeForCase(a,t,s=""){try{const n=await this.getArbitratorForNDA(a);let i=st;if(s&&typeof s=="string"&&s.trim().length>0){const u=s.trim();/^0x[0-9a-fA-F]{64}$/.test(u)?i=u:i=Be(He(u))}const c=(void 0)(i),r=await(await n.createDisputeForCase(a,Number(t),c)).wait();let h=null;for(const u of r.logs)try{const m=n.interface.parseLog(u);if(m&&m.name==="DisputeCreated"){h=Number(m.args[0]);break}}catch{}return{receipt:r,disputeId:h}}catch(n){throw console.error("Error creating dispute for case:",n),n}}async resolveDispute(a,t,s,n,i){try{const c=await this.getArbitratorForNDA(a),d=_e(String(n||"0"));return await(await c.resolveDispute(Number(t),s,d,i)).wait()}catch(c){throw console.error("Error resolving dispute:",c),c}}async getDispute(a,t){try{return await(await this.getArbitratorForNDA(a)).getDispute(Number(t))}catch(s){throw console.error("Error getting dispute:",s),s}}async getActiveDisputesCount(a){try{return await(await this.getArbitratorForNDA(a)).getActiveDisputesCount()}catch(t){throw console.error("Error getting disputes count:",t),t}}}class En{static generatePDF(a){if(!a)return;const t=new Date,s=b=>b?String(b):"—",n=b=>b&&b.length>12?`${b.slice(0,8)}...${b.slice(-6)}`:s(b),i=b=>{const y=Number(b||0);if(!y)return"0s";const C=Math.floor(y/86400),S=Math.floor(y%86400/3600),A=Math.floor(y%3600/60),I=[];return C&&I.push(`${C}d`),S&&I.push(`${S}h`),A&&I.push(`${A}m`),I.length?I.join(" "):`${y}s`},c=!!(a.landlord&&a.tenant),d=!!(a.partyA&&a.partyB),r=c?"Rental Agreement":d?"NDA Agreement":"Contract Summary",h=`${r.replace(/\s+/g,"-")}-${n(a.address)}`,u=Array.isArray(a.transactions)?a.transactions:[],m=c?An(a):d?_n(a):Dn(),w=c?a.cancellation||{}:{},f=c&&(w||{}).hasOwnProperty("requireMutualCancel")?`
